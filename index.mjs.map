{"version":3,"file":"index.mjs","sources":["../lib/assign.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\n\n\n// FUNCTIONS //\n\n/**\n* Cumulatively tests whether at least `n` array elements in a provided array pass a test implemented by a predicate function and assigns the results to elements in the provided output array.\n*\n* @private\n* @param {Collection} x - input array\n* @param {integer} n - number of elements\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} thisArg - execution context\n* @returns {Collection} output array\n*\n* @example\n* function isPositive( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ false, false, false, true, true ];\n*\n* var out = [ false, null, false, null, false, null, false, null, false, null ];\n* var arr = indexed( x, 2, out, 2, 0, isPositive );\n* // returns [ false, null,  false, null,  false, null, false, null, true, null ]\n*/\nfunction indexed( x, n, out, stride, offset, predicate, thisArg ) {\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\tflg = false;\n\tio = offset;\n\tfor ( i = 0; i <= x.length - 1; i++ ) {\n\t\tif ( !flg && predicate.call( thisArg, x[ i ], i, x ) ) {\n\t\t\tn -= 1;\n\t\t\tif ( n <= 0 ) {\n\t\t\t\tflg = true;\n\t\t\t}\n\t\t}\n\t\tout[ io ] = flg;\n\t\tio += stride;\n\t}\n\treturn out;\n}\n\n/**\n* Cumulatively tests whether at least `n` array elements in a provided array pass a test implemented by a predicate function and assigns the results to elements in the provided output array.\n*\n* @private\n* @param {Object} x - input array object\n* @param {integer} n - number of elements\n* @param {Object} out - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} thisArg - execution context\n* @returns {Collection} output array\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* function isPositive( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = toAccessorArray( [ false, false, false, true, true ] );\n*\n* var out = toAccessorArray( [ false, null, false, null, false, null, false, null, false, null ] );\n* var arr = accessors( arraylike2object( x ), 2, arraylike2object( out ), 2, 0, isPositive );\n*\n* var v = arr.get( 8 );\n* // returns true\n*/\nfunction accessors( x, n, out, stride, offset, predicate, thisArg ) {\n\tvar xdata;\n\tvar odata;\n\tvar xget;\n\tvar oset;\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\txdata = x.data;\n\todata = out.data;\n\n\txget = x.accessors[ 0 ];\n\toset = out.accessors[ 1 ];\n\n\tio = offset;\n\tflg = false;\n\tfor ( i = 0; i <= xdata.length - 1; i++ ) {\n\t\tif ( !flg && predicate.call( thisArg, xget( xdata, i ), i, xdata ) ) {\n\t\t\tn -= 1;\n\t\t\tif ( n <= 0 ) {\n\t\t\t\tflg = true;\n\t\t\t}\n\t\t}\n\n\t\toset( odata, io, flg );\n\t\tio += stride;\n\t}\n\treturn odata;\n}\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether at least `n` array elements in a provided array pass a test implemented by a predicate function and assigns the results to elements in the provided output array.\n*\n* @param {Collection} x - input array\n* @param {integer} n - number of elements\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {Collection} output array\n*\n* @example\n* function isPositive( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ false, false, false, true, true ];\n*\n* var out = [ false, null, false, null, false, null, false, null, false, null ];\n* var arr = indexed( x, 2, out, 2, 0, isPositive );\n* // returns [ false, null,  false, null,  false, null, false, null, true, null ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\nfunction assign( x, n, out, stride, offset, predicate, thisArg ) {\n\tvar xo;\n\tvar oo;\n\n\txo = arraylike2object( x );\n\too = arraylike2object( out );\n\tif ( xo.accessorProtocol || oo.accessorProtocol ) {\n\t\taccessors( xo, n, oo, stride, offset, predicate, thisArg );\n\t\treturn out;\n\t}\n\tindexed( x, n, out, stride, offset, predicate, thisArg );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport filled from '@stdlib/array-base-filled';\nimport assign from './assign.js';\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether at least `n` array elements in a provided array pass a test implemented by a predicate function.\n*\n* @param {Collection} x - input collection\n* @param {integer} n - number of elements\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {Array} output array\n*\n* @example\n* function isPositive( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 0, 0, 0, 1, 1 ];\n*\n* var y = cusomeBy( x, 2, isPositive );\n* // returns [ false, false, false, false, true ]\n*/\nfunction cusomeBy( x, n, predicate, thisArg ) {\n\tvar out = filled( false, x.length );\n\treturn assign( x, n, out, 1, 0, predicate, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default cusomeBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cumulatively test whether at least `n` array elements in a provided array pass a test implemented by a predicate function.\n*\n* @module @stdlib/array-base-cusome-by\n*\n* @example\n* import cusomeBy from '@stdlib/array-base-cusome-by';\n*\n* function isPositive( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 0, 0, 0, 1, 1 ];\n* var y = cusomeBy( x, 2, isPositive );\n* // returns [ false, false, false, false, true ]\n*\n* @example\n* import cusomeBy from '@stdlib/array-base-cusome-by';\n*\n* function isPositive( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 0, 0, 0, 1, 1 ];\n*\n* var y = [ false, null, false, null, false, null, false, null, false, null ];\n* var out = cusomeBy.assign( x, 2, y, 2, 0, isPositive );\n* // returns [ false, null, false, null, false, null, false, null, true, null ];\n*\n* var bool = ( y === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["assign","x","n","out","stride","offset","predicate","thisArg","xo","oo","arraylike2object","accessorProtocol","xdata","odata","xget","oset","flg","io","i","data","accessors","length","call","indexed","cusomeBy","filled","setReadOnly","main"],"mappings":";;0TAgKA,SAASA,EAAQC,EAAGC,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,GACtD,IAAIC,EACAC,EAIJ,OAFAD,EAAKE,EAAkBT,GACvBQ,EAAKC,EAAkBP,GAClBK,EAAGG,kBAAoBF,EAAGE,kBAlEhC,SAAoBV,EAAGC,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,GACzD,IAAIK,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAUJ,IARAN,EAAQX,EAAEkB,KACVN,EAAQV,EAAIgB,KAEZL,EAAOb,EAAEmB,UAAW,GACpBL,EAAOZ,EAAIiB,UAAW,GAEtBH,EAAKZ,EACLW,GAAM,EACAE,EAAI,EAAGA,GAAKN,EAAMS,OAAS,EAAGH,KAC7BF,GAAOV,EAAUgB,KAAMf,EAASO,EAAMF,EAAOM,GAAKA,EAAGN,KAC1DV,GAAK,IACK,IACTc,GAAM,GAIRD,EAAMF,EAAOI,EAAID,GACjBC,GAAMb,CAGR,CAsCEgB,CAAWZ,EAAIN,EAAGO,EAAIL,EAAQC,EAAQC,EAAWC,GAC1CJ,IArHT,SAAkBF,EAAGC,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,GACvD,IAAIS,EACAC,EACAC,EAIJ,IAFAF,GAAM,EACNC,EAAKZ,EACCa,EAAI,EAAGA,GAAKjB,EAAEoB,OAAS,EAAGH,KACzBF,GAAOV,EAAUgB,KAAMf,EAASN,EAAGiB,GAAKA,EAAGjB,KAChDC,GAAK,IACK,IACTc,GAAM,GAGRb,EAAKc,GAAOD,EACZC,GAAMb,CAGR,CAqGCmB,CAAStB,EAAGC,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,GACxCJ,EACR,CC7HA,SAASqB,EAAUvB,EAAGC,EAAGI,EAAWC,GAEnC,OAAOP,EAAQC,EAAGC,EADRuB,GAAQ,EAAOxB,EAAEoB,QACD,EAAG,EAAGf,EAAWC,EAC5C,CCYAmB,EAAAC,EAAA,SAAA3B"}